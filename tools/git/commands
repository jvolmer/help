### CONFIGURATION
git config --global core.editor <editor>
git config --global user.name "<name>"
git config --global user.email <mail>


### INITIALIZATION ###
# create folder .git
git init

# add all files in this folder (execpt the ones written in .gitignore)
git add .



### COMMIT ###
# show git status
git status

# stage change in file <filename>
git add <filename>

# unstage a file
git reset <file>

# revert commit but leaving everything in staging area
git reset --soft HEAD^

# go back in history (delete every that follows - should not be done if already published)
git reset --hard <commitid>
# if you want to keep uncommited work
git stash
git reset --hard <commitid>
git shash pop

# delete file that was added in last commit
git rm --cached <ile>
git commit --amend -CHEAD

# commit all staged files
git commit -m "<commit text>"

# commit all changed files (without staging changes before)
git commit -a -m "<commit text>"

# change last commit text
git commit --amend -m "new text"

# add more changes to last commit
git add <files>
git commit --amend
[text-editor opens where you can still change the commit message]

# show all commits
git log
git log --stat  # with some abbreviated statistics
git log --pretty=oneline  # show only one line for each commit
git log --pretty=format:"%h - %an, %ar : %s"  # use specific format
git log -p -<N>  # show differences for last <N> commits
git log --graph  # show branching graph

# show more information about one commit
git show <commitnr>

# go to commit <commitnr> (HEAD is the last one, HEAD^ the one before that)
git checkout <commitnr>

# change one file to version in <branch/commitnr> (e.g. HEAD) 
git checkout <branch/commitnr> -- <filename>

# display a list of the last n commits, change pick to reword and save to change commit-message for one of the commits
git rebase -i HEAD~n



### BRANCHES ###
# show all branchs in this folder
git branch -a

# create branch with name <branchname>
git branch <branchname>

# go to branch <branchname>
git checkout <branchname>

# change name of some branch
git branch -m <oldname> <newname>

# change name of current branch
git branch -m <newname>


### COPY ###
# copy/download newest git committed folder to <foldername>
git clone <path-to-git-folder> <foldername>

# clone and make new directory bare
git clone --bare ...



### REMOTE DIRECTORY ###
# push git commits to <path> (e.g. origin), has to be a bare directory
git push <path>

# pull git commits from <path>
git pull <path>

# pull from origin into <branch> here
git pull origin <branch>

# show paths where to pull from / to where to pull
git remote -v

# change path of <remote> (e.g. origin) from where to pull/ to where to push
git remote set-url <remote> <new path>

# add remote directory with name <remote> (e.g. origin) and path <path>to this one
git remote add <remote> <path>



### INFOS ###
# show infos of git repository
cat .git/config