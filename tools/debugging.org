#+TITLE: Debugging

* gdb
Debugger

** Run
Start new run
#+begin_src shell
  gdb --quiet --args <executable>
#+end_src

Attach to running process
#+begin_src shell
  (sudo) gdb -p <pid (e.g. via ps aux)>
#+end_src

** Commands inside

Get help with =help <command>=

| r                              | Run to next breakpoint or to end                                                                  |
| r > <outfile>                  | run and redirect output to <outfile>                                                              |
| c                              | Continue                                                                                          |
| bt                             | Print backtrace of all stack frames                                                               |
| catch <breakpoint>             | Define a catchpoint (e.g. 'catch syscall connect')                                                |
| info threads                   | Show what threads are doing                                                                       |
| thread apply all backtrace 2   | Get one more stackframe fo all threads                                                            |
| b <functionname> if id == <id> | Set breakpoint where function is called                                                           |
|                                | in threadnr <id>                                                                                  |
| next                           | go to next command                                                                                |
| step                           | go to next command, if functioncall: step into                                                    |
| print <expression>             | print expression                                                                                  |
| thread <id>                    | switch to thread <id>                                                                             |
| rwatch *<mem-address>          | add hardware watchpoint                                                                           |
| layout src                     | 2 windows: src and command (output corrupted: S-l (refresh)                                       |
|                                | (switch window with C-x o), go to layout with C-x a                                               |
| catch throw                    | create a catchpoint that will stop the execution of the program as soon as an exception is thrown |
| up                             |                                                                                                   |

Breakpoint
| b <filename (without path)>:<line> | set breakpoint                  |
| info b                             | list breakpoints                |
| del <breakpoint nr>                | delete breakpoint, nr from info |

Debugging exceptions: https://robinmoussu.gitlab.io/blog/post/2018-12-02_gdb/

Print a string without converting any non-printable characters into escape sequences
#+begin_src shell
  (gdb) printf "%s\n", (char *)variable
#+end_src


** Configuration
Normally gdb auto-loads =~/.gdbinit= and =.gdbinit= in your current directory
Running gdb as super user can prevent this (due to security reasons), then you can start gdb with
#+begin_src shell
  sudo gdb -q -iex "set auto-load safe-path <path>" <your execution file>
#+end_src
where the path directory includes the =.gdbinit= file you want to load
Check if a local file is loaded (for some reason a loaded =~/.gdbinit= file is not shown here):
#+begin_src shell
  info auto-load
#+end_src

** rr
Record
#+begin_src shell
  rr record <executable>
#+end_src
| -e1 | very eagerly context-switch threads: every thread can only run one event |
| -c4 | thread has time slice of 4 units                                         |

Debug opens gdb
#+begin_src shell
  rr replay
#+end_src
| -p <pid>     | start at this process                                                   |
| -g <eventid> | start at this event (when restarting use r 1 to start from first event) |
Recordings are saved in ~/.local/share/rr

Show all processes of run
#+begin_src shell
  rr ps [<trace-dir>]
#+end_src
Shows process command with PID and event number (PPID)

Show all records
#+begin_src shell
  rr ls
#+end_src

* strace
Runs the specified command and records the system calls which are called and signals that are received (show in stderr)

#+begin_src shell
  
  strace [options] <executable>
  
#+end_src

Options:
=-e '<name>'= Only show system calls with that system call name
=-f= show children processes (other than main process)

* Rust

Show info logs for everything, but for specific packages show debug logs
#+begin_src shell
  
  RUST_LOG=info,<some used package>=debug cargo run --quiet
  
#+end_src

Get type of something, e.g. to print it out
#+begin_src rust
  
  fn type_name_of<T>(_: &T) -> &'static str {
    std::any::type_name::<T>()
  }
  
#+end_src

* General

Don't show stdout of command
#+begin_src shell
  
  <command> > /dev/null
  
#+end_src

* coredump
#+begin_src shell
  ulimit -a // see all
  ulimit -c unlimited // set core file size to unlimited
#+end_src
#+begin_src shell
  apt install systemd-coredump
#+end_src
Possibly do =sudo systemctl enable apport.service=, have to use =sudo= for =coredumpctl=
#+begin_src shell
  coredumpctl list
  coredumpctl debug <name>
  coredumpctl gdb // exectues gdb on last entry
#+end_src
Then =bt= to show backtrace.
