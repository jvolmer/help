* Shell

What shell I am using
#+begin_src shell
  echo $SHELL
#+end_src

Reload settings of file
#+begin_src shell
  source <file>
#+end_src

** In and Output
| Channel | Descriptor | Default  |
|---------+------------+----------|
| STDIN   |          1 | Keyboard |
| STDOUT  |          2 | Monitor  |
| STDERR  |          3 | Monitor  |

*** Deflection of channels
| CMD < FILE       | Take STDIN from FILE             |
| CMD 0< FILE      |                                  |
| CMD > FILE       | Write STDOUT to FILE             |
| CMD 1> FILE      |                                  |
| CMD 2> FILE      | Write STDERR to FILE             |
| CMD >> FILE      | Append STDOUT to FILE            |
| CMD 2>> FILE     | Append STDERR to FILE            |
| CMD1 PIPE CMD2   | Pipe STDOUT from CMD1 to CMD2    |
| CMD >& FILE      | Write STDOUT and STDERR to FILE  |
| CMD > FILE 2>&1  |                                  |
| CMD >> FILE 2>&1 | Append STDOUT and STDERR to FILE |

Do both: save output of executable in file and show it on screen
#+begin_src shell
  CMD 2>&1 | tee FILE
#+end_src

*** Suppress
| CMD 2>&-        | Suppress STDERR |
| CMD > /dev/null | Suppress STDOUT |

** Keybindings
*** Navigation
| C-a | start of line      |
| C-e | end of line        |
| M-b | one word backwards |
| M-f | one word forwards  |
*** Actions
| C-k | delete from cursor until end of line |
| C-y | undo last deletion                   |
*** Copy and paste
| C-S-c | copy selection to clipboard (marked by mouse) |
| C-S-v | paste clipboard to shell                      |
| S-Ins |                                               |

Write both stderr and stdout to file (write stdout to file and redirect stderr to stdout)
#+begin_src shell
  command &> file // OR
  command > file 2>&1
#+end_src

* Bash

Check if file exists
#+begin_src bash
  if [ -f $FILE ];
  then
     echo "File $FILE exists."
  else
     echo "File $FILE does not exist."
  fi
#+end_src

** Usage Tipps

*** Quotes
Single quotes: preserve literal value of each character
Double quotes: preserve literal value of each character except of $, `, \ and possibly !. * and @ have special meanings. Ignore wildcards

*** Execute commands

Give <command> in ascii (can use \t or \n or \U... for utf-8)
#+begin_src bash
  $'<command>'
#+end_src

Execute command <command>, writes it to stdout and puts this again into shell
#+begin_src bash
  $(<command>) or `<command>`
#+end_src

Shifts <input> into standardinput of <command>
#+begin_src bash
  <command> <<< <input>
#+end_src

*** Variable Scope
Export variable such that they are available (inherited by) other programs run by the shell that exports them (environment vars)
#+begin_src bash
 export <var> 
#+end_src

Define assignement only for following command
#+begin_src bash
 <assignement> <command>
#+end_src

*** Executing files
At start of file define which command to execute. Will give filename to this command as first parameter
#+begin_src bash
  #!<command>
#+end_src

